#include <iostream>
#include <ctime>
#include <string.h>
#include <string>
#include <sstream> 
#include <cstring>
#include <conio.h>
#include <cstdlib>
#include <iomanip>
using namespace std;

void swap(int* a, int* b) {
    a = b;
    b = a;
}

int find_max(int* arr, int size)
{
    int max = arr[0];
    for (int i = 1; i < size; i++)
        if (arr[i] > max) max = arr[i];

    return(max);
}

int find_min_index(int* arr, int size)
{
    int min = 0;
    for (int i = 1; i < size; i++)
        if (arr[i] < arr[min]) min = i;

    return(min);
}

int main()
{
    setlocale(LC_ALL, "Russian");
    //1.Создайте двумерный массив целых чисел. Удалите из него строку и столбец, на пересечении которых расположен минимальный элемент.
    int d[5][5];
    int n = 5;
    cout << "Task 1" << endl;
    srand(time(NULL));
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            d[i][j] = rand() % 30 + 1;
            cout << setw(3) << d[i][j] << ' ';
        }
        cout << endl;
    }
    cout << endl;
    int mini = 0, minj = 0;
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (d[i][j] < d[mini][minj])
            {
                mini = i;
                minj = j;
            }
    for (int i = mini; i < n - 1; i++)
        for (int j = 0; j < n; j++)
            d[i][j] = d[i + 1][j];
    for (int j = minj; j < n - 1; j++)
        for (int i = 0; i < n; i++)
            d[i][j] = d[i][j + 1];
    --n;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
            cout << setw(3) << d[i][j] << ' ';
        cout << endl;
    }


    //2.Даны две матрицы. Получите их произведение. 
    cout << endl << "Task 2" << endl;
    int a[5][5];
    int b[5][5];
    int c[5][5];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            a[i][j] = rand() % 5;
        }
    }
    cout << "Первая матрица: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(3) << a[i][j] << ' ';
        }
        cout << endl;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            b[i][j] = rand() % 5;
        }
    }
    cout << "Вторая матрица: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(3) << b[i][j] << ' ';
        }
        cout << endl;
    }
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
        {
            c[i][j] = 0;
            for (int z = 0; z < n; z++)
                c[i][j] = c[i][j] + a[i][z] * b[z][j];
        }
    cout << "\nРезультат умножения:\n";
    for (int i = 0; i < n; i++)
    {
        cout << endl;
        for (int j = 0; j < n; j++)
            cout << c[i][j] << "\t";
    }
    cout << endl;


//3.Составьте программу, меняющую местами элементы матрицы симметрично побочной диагонали.
    cout << endl << "Task 3" << endl;
    int arr[5][5];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = rand() % 20;
        }
    }
    cout << "Матрица: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(3) << arr[i][j] << ' ';
        }
        cout << endl;
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            swap(arr[i][j], arr[n - j - 1][n - i - 1]);
        }
    }
    cout << "Полученная матрица:" << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << setw(3) << arr[i][j] << " ";
        }
        cout << endl;
    }
    

//4.В квадратной таблице обменяйте местами элементы строки и столбца, на пересечении которых находится минимальный из положительных элементов.
    cout << endl << "Task 4" << endl;
    int f[5][5];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            f[i][j] = rand() % 20 ;
        }
    }
    cout << "Матрица: " << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(3) << f[i][j] << ' ';
        }
        cout << endl;
    }
    int im = 0, jm = 0;
    cout << endl << "Полученная матрица:" << endl;
    int min = f[0][0];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            if (f[i][j] < min) {
                min = f[i][j];
                im = i;
                jm = j;
            }

    int g;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i != im && j != jm)
            {
                g = f[i][jm];
                f[i][jm] = f[im][j];
                f[im][j] = g;
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout <<  f[i][j] << "    ";
        }
        cout << endl;
    }




//5.Наименьший элемент каждой строки прямоугольной таблицы, начиная со второй, замените наибольшим элементом предыдущей строки.
    cout << endl << "Task 5" << endl << "Матрица:" << endl ;
    const int n1 = 4;
    const int m1 = 3;

    int arr1[n1][m1];

    for (int i = 0; i < n1; i++)
    {
        for (int j = 0; j < m1; j++)
        {
            arr1[i][j] = rand() % 10;
            cout << arr1[i][j] << " ";
        }
        cout << "\n";
    }

    for (int i = n1 - 1; i >= 1; i--)
    {
        int temp = find_min_index(arr1[i], m1);
        arr1[i][temp] = find_max(arr1[i - 1], m1);
    }

    cout << endl << "Полученная матрица:" << endl;

    for (int i = 0; i < n1; i++)
    {
        for (int j = 0; j < m1; j++)
        {
            cout << arr1[i][j] << " ";
        }
        cout << "\n";
    }


    return(0);
}
